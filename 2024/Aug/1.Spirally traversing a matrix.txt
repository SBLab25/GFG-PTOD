

class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int mat[][]) {
        // code here
        int n=mat.length,m=mat[0].length,s=n*m;
        ArrayList<Integer> ans=new ArrayList<>();
        int a=0,b=0,c=n-1,d=m-1;
        while(ans.size()<s){
            for(int i=b;i<=d && ans.size()<s;i++) ans.add(mat[a][i]);
            a++;
            for(int i=a;i<=c && ans.size()<s;i++) ans.add(mat[i][d]);
            d--;
            for(int i=d;i>=b && ans.size()<s;i--) ans.add(mat[c][i]);
            c--;
            for(int i=c;i>=a && ans.size()<s;i--) ans.add(mat[i][b]);
            b++;
        }
        return ans;
    }
}



Alter Code:



class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int matrix[][]) {
        // code here
        ArrayList<Integer> result = new ArrayList<>();

        int startRow = 0;
        int startCol = 0;
        int endRow = matrix.length - 1;
        int endCol = matrix[0].length - 1;

        while (startRow <= endRow && startCol <= endCol) {
            // Top Boundary
            for (int j = startCol; j <= endCol; j++) {
                result.add(matrix[startRow][j]);
            }
            // Right Boundary
            for (int i = startRow + 1; i <= endRow; i++) {
                result.add(matrix[i][endCol]);
            }
            // Bottom Boundary
            for (int j = endCol - 1; j >= startCol; j--) {
                if (startRow == endRow) {
                    break;
                }
                result.add(matrix[endRow][j]);
            }
            // Left Boundary
            for (int i = endRow - 1; i >= startRow + 1; i--) {
                if (startCol == endCol) {
                    break;
                }
                result.add(matrix[i][startCol]);
            }

            startCol++;
            startRow++;
            endCol--;
            endRow--;
        }

        return result;
    }
}