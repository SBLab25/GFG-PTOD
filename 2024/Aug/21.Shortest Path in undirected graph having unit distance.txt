

class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        ArrayList<ArrayList<Integer>>arr = new ArrayList<>();
        
        for(int i = 0; i<n; i++){
            arr.add(new ArrayList<>());
        }
        
        for(int i = 0; i<m; i++){
            arr.get(edges[i][0]).add(edges[i][1]);
            arr.get(edges[i][1]).add(edges[i][0]);
        }
        
        int[] dist = new int[n];
        
        for(int i = 0; i<n; i++){
            dist[i] = Integer.MAX_VALUE;
            
        }
        
        dist[src] = 0;
        Queue<Integer>q = new LinkedList<>();
        q.add(src);
        
        while(!q.isEmpty()){
            int node = q.poll();
            for(int e : arr.get(node)){
                if(dist[node]+1<dist[e]){
                    dist[e] = dist[node]+1;
                    q.add(e);
                }
            }
        }
        for(int i = 0; i<n; i++){
            if(dist[i] == Integer.MAX_VALUE){
                dist[i] = -1;
            }
        }
        return dist;
    }
}